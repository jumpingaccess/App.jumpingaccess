<h3 class="mb-3">Streams sur ott.jumpingaccess.com</h3>

<%= render "new_modal", antmedia_stream: @new_antmedia_stream %>
<div class="d-flex justify-content-between align-items-center mb-3">
  <%= link_to "#", class: "btn btn-outline-primary btn-sm", data: { bs_toggle: "modal", bs_target: "#newModal" } do %>
    <i class="fa-solid fa-plus me-2"></i> Ajouter
  <% end %>

  <%= button_to import_antmedia_admin_meeting_path(@meeting),
                method: :post,
                class: "btn btn-outline-primary btn-sm",
                data: { turbo_confirm: "Importer les streams existants depuis Antmedia ?" } do %>
    <i class="fa-solid fa-download me-2"></i> Importer depuis Antmedia
  <% end %>
</div>
<!-- üì¶ Carte des streams locaux -->
<div class="card mb-4">
  <div class="card-header">
    <h5 class="mb-0"><i class="fa-solid fa-server me-2"></i> Streams ajout√©s depuis cette page</h5>
  </div>
  <div class="card-body p-0">
    <table class="table table-striped mb-0">
      <thead>
        <tr>
          <th>Nom</th>
          <th>Cl√©</th>
          <th>Protocole</th>
          <th>Piste</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <% @antmedia_streams.each do |stream| %>
          <tr>
            <td><%= stream.stream_name %></td>
            <td><%= stream.stream_key %></td>
            <td><%= stream.proto %></td>
            <td><%= stream.piste_name %></td>
            <td>
              <%= render "edit_modal", antmedia_stream: stream %>
              <%= button_to "Supprimer", antmedia_destroy_admin_meeting_path(@meeting, stream),
                  method: :delete,
                  class: "btn btn-danger btn-sm",
                  data: { turbo_confirm: "Supprimer ce stream ?" } %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>

<!-- üåç Carte des streams distants -->
<div class="card">
  <div class="card-header">
    <h5 class="mb-0"><i class="fa-solid fa-video me-2"></i> Streams pr√©sents sur ott.jumpingaccess.com</h5>
  </div>
  <div class="card-body p-0">
    <table class="table table-bordered table-sm mb-0">
      <thead>
        <tr>
          <th>Nom</th>
          <th>Status</th>
          <th>Stream ID</th>
          <th>RTMP URL</th>
          <th>D√©bit</th>
        </tr>
      </thead>
      <tbody>
        <% @remote_streams.each do |stream| %>
          <tr>
            <td><%= stream["name"] %></td>
            <td><%= stream["status"] %></td>
            <td><%= stream["streamId"] %></td>
            <td><%= stream["rtmpURL"] %></td>
            <% if stream["streamId"] %>
              <td data-stream-id="<%= stream["streamId"] %>">
                <span data-bitrate-value>
                  <%= number_with_precision(stream["bitrate"].to_f / 1_000_000, precision: 2) %> Mbit/s
                </span>
              </td>
            <% else %>
              <td colspan="2">Donn√©es manquantes</td>
            <% end %>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>

<!-- üì° Script pour mise √† jour des d√©bits -->
<script>
  document.addEventListener("turbo:load", function () {
    let intervalId = null

    function updateBitrates() {
      fetch("/admin/streams/stats.json")
        .then(response => response.json())
        .then(data => {
          const activeStreams = data.filter(s => s.status !== "created" && s.status !== "finished")

          // Si aucun stream actif, on ne d√©marre pas ou on arr√™te si d√©j√† d√©marr√©
          if (activeStreams.length === 0) {
            if (intervalId) {
              clearInterval(intervalId)
              intervalId = null
            }
            return
          }

          document.querySelectorAll("[data-stream-id]").forEach(el => {
            const streamId = el.getAttribute("data-stream-id")
            const stream = activeStreams.find(s => s.id === streamId)

            if (stream && stream.bitrate !== undefined) {
              const valueEl = el.querySelector("[data-bitrate-value]")
              if (valueEl) {
                const mbps = (stream.bitrate / 1_000_000).toFixed(2)
                valueEl.textContent = `${mbps} Mbit/s`
              }
            }
          })

         
          if (!intervalId) {
            intervalId = setInterval(updateBitrates, 5000)
          }
        })
        .catch(err => {
          console.error("Erreur lors de la r√©cup√©ration des stats de stream:", err)
        })
    }

    updateBitrates()

    document.addEventListener("turbo:before-cache", () => {
      if (intervalId) {
        clearInterval(intervalId)
      }
    })
  })
</script>

